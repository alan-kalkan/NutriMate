generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @db.VarChar(255) @unique
  name        String    @db.VarChar(255) @unique
  description String?   @db.VarChar(1000)
  products    ProductCategory[]
}

model Brand {
  id          String    @id @db.VarChar(255) @unique
  name        String    @db.VarChar(255) @unique
  description String?   @db.VarChar(1000)
  products    Product[]
}

model Product {
  id          String            @id @db.VarChar(255) @unique
  name        String            @db.VarChar(255) @unique
  description String?           @db.VarChar(1000)
  treatmentDuration Int?        @db.Int()
  price       Decimal           @db.Decimal(10, 2)
  image_url   String?           @db.Text
  averageRating Float?          @db.Float()
  created_at  DateTime          @db.Timestamp(0) @default(now())
  brand       Brand?            @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  brand_id    String?           @db.VarChar(255)
  categories  ProductCategory[]
  reviews     Review[]        
}

model ProductCategory {
  product_id  String   @map("product_id")
  category_id String   @map("category_id")
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([product_id, category_id])
}

model Review {
  id         String  @id @default(uuid())
  rating     Int
  comment    String
  created_at DateTime @default(now())
  product_id String
  user_id    String

  product    Product @relation(fields: [product_id], references: [id], map: "Review_Product_fkey")
  user       User    @relation(fields: [user_id], references: [id], map: "Review_User_fkey")

  @@unique([user_id, product_id]) // Enforce unique reviews per user per product
}

model User {
  id         String    @id @unique(map: "id_UNIQUE") @db.VarChar(255)
  name       String    @db.VarChar(255)
  last_name  String    @db.VarChar(255)
  gender     String    @db.VarChar(255) @default("null")
  email      String    @unique(map: "email_UNIQUE") @db.VarChar(255)
  password   String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  reviews    Review[] 
}